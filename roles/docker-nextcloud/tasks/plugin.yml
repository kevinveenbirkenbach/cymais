- name: "Disable incompatible plugins for {{plugin_key}}."
  command: "{{nextcloud_docker_exec_occ}} app:disable {{incompatible_plugin}}"
  loop: "{{plugin_value.incompatible_plugins}}"
  loop_control: 
    loop_var: incompatible_plugin
  register: disable_incompatible_plugin_result
  changed_when: disable_incompatible_plugin_result.rc == 0 and ("No such app enabled" not in disable_incompatible_plugin_result.stdout)
  when: 
    - plugin_value.incompatible_plugins is defined and plugin_value.incompatible_plugins | length > 0
    - plugin_value.enabled | bool

- name: disable {{ plugin_key }} nextcloud plugin
  command: "{{nextcloud_docker_exec_occ}} app:disable {{ plugin_key }}"
  register: disable_result
  changed_when: disable_result.rc == 0 and ("No such app enabled" not in disable_result.stdout)
  when: not (plugin_value.enabled | bool)

- name: install {{ plugin_key }} nextcloud plugin
  command: "{{ nextcloud_docker_exec_occ }} app:install {{ plugin_key }}"
  register: install_result
  failed_when: >
    install_result.rc != 0
    and
    ("already installed" not in install_result.stdout)
    and
    ("not compatible with this version of the server" not in install_result.stdout)
  changed_when: >
    install_result.rc == 0
    and
    ("already installed" not in install_result.stdout)
  when: plugin_value.enabled | bool

- block:
  - name: enable {{plugin_key}} nextcloud plugin
    command: "{{nextcloud_docker_exec_occ}} app:enable {{plugin_key}}"
    register: enable_result
    changed_when: enable_result.rc == 0 and ("already enabled" not in enable_result.stdout)

  - name: Check if {{nextcloud_control_node_plugin_vars_directory}}{{ plugin_key }}.yml exists
    stat:
      path: "{{nextcloud_control_node_plugin_vars_directory}}{{ plugin_key }}.yml"
    delegate_to: localhost
    become: false
    register: plugin_vars_file

  - name: "Load {{ plugin_key }} configuration variables"
    include_vars:
      file: "{{nextcloud_control_node_plugin_vars_directory}}{{ plugin_key }}.yml"
    when: plugin_vars_file.stat.exists

  - name: "Set {{ item.configkey }} for {{ item.appid }}"
    loop: "{{ plugin_configuration }}"
    command: >
      {{ nextcloud_docker_exec_occ }} config:app:set {{ item.appid }} {{ item.configkey }} --value '{{ item.configvalue | to_json if item.configvalue is mapping else item.configvalue }}'
    register: config_set_result
    changed_when: (config_set_result.stdout is defined) and ("Config value were not updated" not in config_set_result.stdout)
    when: plugin_vars_file.stat.exists

  - name: Check if {{nextcloud_control_node_plugin_tasks_directory}}{{ plugin_key }}.yml exists
    stat:
      path: "{{nextcloud_control_node_plugin_tasks_directory}}{{ plugin_key }}.yml"
    delegate_to: localhost
    become: false
    register: plugin_tasks_file

  - name: "include {{nextcloud_control_node_plugin_tasks_directory}}{{ plugin_key }}.yml"
    include_tasks: "{{nextcloud_control_node_plugin_tasks_directory}}{{ plugin_key }}.yml"
    when: plugin_tasks_file.stat.exists
  when:
    - plugin_value.enabled | bool
    - install_result is defined
    - >
      install_result.rc == 0
      or "already installed" in install_result.stdout