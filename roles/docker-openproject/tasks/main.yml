---
- name: "include docker-central-database"
  include_role: 
    name: docker-central-database

- name: "include role nginx-domain-setup for {{application_id}}"
  include_role:
    name: nginx-domain-setup
  vars:
    domain: 	"{{ domains[application_id] }}"
    http_port: 	"{{ ports.localhost.http[application_id] }}"

- name: "Create {{openproject_plugins_service}}"
  file:
    path: "{{openproject_plugins_service}}"
    state: directory
    mode: '0755'

- name: "Transfering Gemfile.plugins to {{openproject_plugins_service}}"
  copy:
    src: Gemfile.plugins
    dest: "{{openproject_plugins_service}}Gemfile.plugins"
  notify:
    - docker compose project build and setup

- name: "Transfering Dockerfile to {{openproject_plugins_service}}Dockerfile"
  template:
    src: Dockerfile
    dest: "{{openproject_plugins_service}}Dockerfile"
  notify:
    - docker compose project build and setup

- name: "include role docker-repository-setup for {{application_id}}"
  include_role: 
    name: docker-repository-setup

- name: "create {{dummy_volume}}"
  file:
    path: "{{dummy_volume}}"
    state: directory
    mode: 0755

- name: "copy docker-compose.yml and env file"
  include_tasks: copy-docker-compose-and-env.yml

- name: flush docker service
  meta: flush_handlers

- name: "Set OpenProject settings via rails"
  vars:
    rails_env: "RAILS_ENV=production"
    rails_cmd: "bundle exec rails runner"
  docker_container:
    name: openproject-web
    command: >
      bash -c "cd /app &&
      {{ rails_env }} {{ rails_cmd }} 'Setting[:{{ item.key }}] = {{ item.value | to_json }}'"
  loop: "{{ openproject_rails_settings | dict2items }}"

- name: Setup LDAP
  include_tasks: ldap.yml
  when: applications[application_id].features.ldap | bool