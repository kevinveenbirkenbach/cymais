templates:
{% if not applications | is_feature_enabled('central_database',application_id) %}
  - "templates/postgres.template.yml"
{% endif %}
  #- "templates/redis.template.yml"
  - "templates/web.template.yml"
  ## Uncomment the next line to enable the IPv6 listener
  #- "templates/web.ipv6.template.yml"
  - "templates/web.ratelimited.template.yml"
  ## Uncomment these two lines if you wish to add Lets Encrypt (https)
  #- "templates/web.ssl.template.yml"
  #- "templates/web.letsencrypt.ssl.template.yml"

## which TCP/IP ports should this container expose?
## If you want Discourse to share a port with another webserver like Apache or nginx,
## see https://meta.discourse.org/t/17247 for details
expose:
  - "127.0.0.1:{{ports.localhost.http[application_id]}}:80"   # http

params:
  db_default_text_search_config: "pg_catalog.english"

  ## Set db_shared_buffers to a max of 25% of the total memory.
  ## will be set automatically by bootstrap based on detected RAM, or you can override
  db_shared_buffers: "4096MB"

  ## can improve sorting performance, but adds memory usage per-connection
  #db_work_mem: "40MB"

  ## Which Git revision should this container use? (default: tests-passed)
  #version: tests-passed

env:
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  LANGUAGE: en_US.UTF-8
  #DISCOURSE_DEFAULT_LOCALE: {{ HOST_LL }} # Deactivated because not right format was selected @todo find right format

  ## How many concurrent web requests are supported? Depends on memory and CPU cores.
  ## will be set automatically by bootstrap based on detected CPUs, or you can override
  UNICORN_WORKERS: 8

  ## Required. Discourse will not work with a bare IP number.
  DISCOURSE_HOSTNAME: {{domains | get_domain(application_id)}}

  ## Uncomment if you want the container to be started with the same
  ## hostname (-h option) as specified above (default "$hostname-$config")
  #DOCKER_USE_HOSTNAME: true

  ## on initial signup example 'user1@example.com,user2@example.com'
  DISCOURSE_DEVELOPER_EMAILS:       {{users.administrator.email}}

  # Set Logo
  {% if service_provider.platform.logo | bool %}
  DISCOURSE_LOGO_URL:       "{{ service_provider.platform.logo  }}"
  DISCOURSE_LOGO_SMALL_URL: "{{ service_provider.platform.logo  }}"
  {% endif %}

  # SMTP ADDRESS, username, and password are required
  # WARNING the char '#' in SMTP password can cause problems!
  DISCOURSE_SMTP_ADDRESS:           {{ system_email.host }}
  DISCOURSE_SMTP_PORT:              {{ system_email.port }}
  DISCOURSE_SMTP_USER_NAME:         {{ users['no-reply'].email }}
  DISCOURSE_SMTP_PASSWORD:          {{ users['no-reply'].mailu_token }}
  DISCOURSE_SMTP_ENABLE_START_TLS:  {{ system_email.start_tls | upper }}
  DISCOURSE_SMTP_DOMAIN:            {{ system_email.domain }}
  DISCOURSE_NOTIFICATION_EMAIL:     {{ users['no-reply'].email }}

  # Database Configuration
  DISCOURSE_DB_USERNAME: {{ database_username }}
  DISCOURSE_DB_PASSWORD: {{ database_password }}
  DISCOURSE_DB_HOST:     {{ database_host }}
  DISCOURSE_DB_NAME:     {{ database_name }}

  # Redis Configuration
  DISCOURSE_REDIS_HOST: {{application_id}}-redis

  ## If you added the Lets Encrypt template, uncomment below to get a free SSL certificate
  #LETSENCRYPT_ACCOUNT_EMAIL: administrator@veen.world

  ## The http or https CDN address for this Discourse instance (configured to pull)
  ## see https://meta.discourse.org/t/14857 for details
  #DISCOURSE_CDN_URL: https://discourse-cdn.example.com
  
  ## The maxmind geolocation IP address key for IP address lookup
  ## see https://meta.discourse.org/t/-/137387/23 for details
  #DISCOURSE_MAXMIND_LICENSE_KEY: 1234567890123456

## The Docker container is stateless; all data is stored in /shared
volumes:
  - volume:
      host: discourse_data
      guest: /shared
  - volume:
      host: /var/discourse/shared/standalone/log/var-log
      guest: /var/log

## Plugins go here
## see https://meta.discourse.org/t/19157 for details
hooks:
  after_code:
    - exec:
        cd: $home/plugins
        cmd:
          - git clone  --depth=1 https://github.com/discourse/docker_manager.git
          - git clone  --depth=1 https://github.com/discourse/discourse-activity-pub.git
          - git clone  --depth=1 https://github.com/discourse/discourse-calendar.git
          - git clone  --depth=1 https://github.com/discourse/discourse-akismet.git
          - git clone  --depth=1 https://github.com/discourse/discourse-cakeday.git
          - git clone  --depth=1 https://github.com/discourse/discourse-solved.git
          - git clone  --depth=1 https://github.com/discourse/discourse-voting.git
          - git clone  --depth=1 https://github.com/discourse/discourse-oauth2-basic.git
          - git clone  --depth=1 https://github.com/discourse/discourse-openid-connect.git

## Any custom commands to run after building
run:
  - exec: echo "Beginning of custom commands"
  - exec: rails r "SiteSetting.force_https = true"
  ## If you want to set the 'From' email address for your first registration, uncomment and change:
  ## After getting the first signup email, re-comment the line. It only needs to run once.
  #- exec: rails r "SiteSetting.notification_email='info@unconfigured.discourse.org'"
{% if applications | is_feature_enabled('oidc',application_id) %}
  # Deactivate Default Login
  - exec: rails r "SiteSetting.enable_local_logins = false"
  - exec: rails r "SiteSetting.enable_passkeys = false" # https://meta.discourse.org/t/passwordless-login-using-passkeys/285589

  - exec: rails r "SiteSetting.username_change_period = 0" # Deactivate changing of username

  # Activate Administrator User
  #- exec: printf '{{users.administrator.email}}\n{{users.administrator.password}}\n{{users.administrator.password}}\nY\n' | rake admin:create
  #- exec: rails r "User.find_by_email('{{users.administrator.email}}').update(username: '{{users.administrator.username}}')"

  # The following code is just an inspiration, how to connect with the oidc account. as long as this is not set the admini account needs to be manually connected with oidc 
  # docker exec -it discourse_application rails runner "user = User.find_by_email('test@cymais.cloud'); UserAuth.create(user_id: user.id, provider: 'oidc', uid: 'eindeutige_oidc_id', info: { name: user.username, email: user.email })"

  # OIDC Activation
  - exec: rails r "SiteSetting.openid_connect_enabled = true"
  - exec: rails r "SiteSetting.openid_connect_discovery_document = '{{oidc.client.discovery_document}}'"
  - exec: rails r "SiteSetting.openid_connect_client_id = '{{oidc.client.id}}'"         
  - exec: rails r "SiteSetting.openid_connect_client_secret = '{{oidc.client.secret}}'"     
  - exec: rails r "SiteSetting.openid_connect_rp_initiated_logout_redirect = 'https://{{domains | get_domain(application_id)}}'"
  - exec: rails r "SiteSetting.openid_connect_allow_association_change = false"
  - exec: rails r "SiteSetting.openid_connect_rp_initiated_logout = true"
{% endif %}
  - exec: echo "End of custom commands"

docker_args:
  - --network={{application_id}}_default
  - --name={{applications[application_id].container}}
